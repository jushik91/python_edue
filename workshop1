# 솔루션 ==============================================

import dash_bootstrap_components as dbc
from dash import Dash, html, dcc, Output, Input, State, callback, dash_table
import pandas as pd
from dash.exceptions import PreventUpdate # 특정 상황에서 업데이트 안하도록 지정

app = Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])

# [1 단계] 전역 변수 설계(코드 분석) 
df = pd.read_csv('car_data.csv')

company_list = df['company'].sort_values().unique()
fuel_list = df['fuel'].unique()
year_min, year_max = df['year'].agg(['min', 'max'])
year_marks = {i:str(i) for i in range(year_min, year_max+1, 5)}
price_min, price_max = df['price'].agg(['min', 'max'])

# DataTable에 지정할 옵션
table_option=dict(
        page_size=20, 
        sort_action='native',
        style_header={'textAlign': 'center','backgroundColor': 'lightgray', 'fontWeight': 'bold' }
)


# [2 단계] Layout 설계
header = html.H1(' Used Car Search Dashboard', className='p-3 fw-bold text-white text-center', style={'backgroundColor':'RoyalBlue'})

# left 변수에 입력 UI 메뉴 설계
left = dbc.Card([
    html.H6('Select Company & Model', className='fw-bold'),
    dcc.Dropdown(options=company_list, value=company_list[0], placeholder='Select Company', id='drp_company'),
    dcc.Dropdown(placeholder='Select Model', multi=True, id='drp_model'),

    html.Hr(),
    html.H6('Select Year & Price & Fuel', className='fw-bold'),
    dcc.RangeSlider(year_min, year_max,  step=1, value=[year_min, year_max], marks=year_marks, id='rsd_year',
                    tooltip={"placement": "bottom", "always_visible": True}),
    
    html.Div([
        dcc.Input(type='number', step=1000, value=price_min,  id='inp_price1'), html.Label('$ ~ '),
        dcc.Input(type='number', step=1000, value=price_max, id='inp_price2'), html.Label('$')
    ], className='ms-2'),

    dcc.Checklist(options=fuel_list, value=[fuel_list[0]], inline=True, 
                    labelStyle={'marginRight':10}, className='ms-2', id='chk_fuel'),

    html.Div([
        dbc.Button('Data Submit' , n_clicks=0, color='secondary', id='button')
    ], className='d-grid col-6 mx-auto')
], className='p-2 d-grid gap-3')

# right에 테이터테이블 구성
right = dbc.Card([
    html.Div('Search Info', id='div_info'),
    dash_table.DataTable(**table_option, id='datatable')
], body=True)

app.layout=html.Div([
    header,
    dbc.Row([ dbc.Col( left, width=5), dbc.Col( right, width=7 ) ])
], className='mx-3')

# [3 단계] 콜백 설계
@callback(
    Output('drp_model', 'options'), 
    Output('drp_model', 'value'),
    Input('drp_company', 'value')
)
def display_model(p_company):
    if not p_company: raise PreventUpdate
    model_list = df.query('company==@p_company')['model'].unique()
    return model_list, model_list[0]

@callback(
    Output('datatable', 'data'), Output('div_info', 'children'),
    Input('button', 'n_clicks'),
    State('drp_company', 'value'), 
    State('drp_model', 'value'), 
    State('rsd_year', 'value'), 
    State('inp_price1', 'value'), State('inp_price2', 'value'), 
    State('chk_fuel', 'value'), 
)
def display_data(button, p_company, p_model, p_year, p_price1, p_price2, p_fuel):
    #print(button, p_company, p_model, p_year, p_price1, p_price2, p_fuel)
    if not button or not p_company or not p_model or not p_price1 or not p_price2 or not p_fuel : raise PreventUpdate
    qdf = df.query('company==@p_company and model in @p_model and @p_year[0]<=year<=@p_year[1] and @p_price1<=price<=@p_price2 and fuel in @p_fuel')
    #print(qdf.head())
    info = html.Div([
        html.H5([f'⚡ {p_company} {", ".join(p_model)}']),
        html.H6(f'▪️ year : {p_year[0]} ~ {p_year[1]}'),
        html.H6(f'▪️ price : {p_price1:,} ~ {p_price2:,}'),
        html.H6(f'▪️ fuel : {", ".join(p_fuel)}'),
    ])
    return qdf.to_dict('records'), info

if __name__ == '__main__':
    app.run(debug=True, port=port, jupyter_mode='external') 
